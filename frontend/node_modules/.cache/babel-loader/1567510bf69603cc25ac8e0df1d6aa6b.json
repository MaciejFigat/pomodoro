{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\48500\\\\Desktop\\\\MERN\\\\pomodoro\\\\frontend\\\\src\\\\screens\\\\PomodoroDisplayScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\n\nconst PomodoroDisplayScreen = () => {\n  _s();\n\n  const [pomodoroDuration, setPomodoroDuration] = useState(25);\n  const [pomodoroDone, setPomodoroDone] = useState(0);\n  const [restDuration, setRestDuration] = useState(5);\n  const [seconds, setSeconds] = useState(25 * 60);\n  const [restSeconds, setRestSeconds] = useState(5 * 60);\n  const [isActive, setIsActive] = useState(false);\n\n  const toggle = () => {\n    setIsActive(!isActive);\n  };\n\n  const reset = () => {\n    setSeconds(pomodoroDuration * 60);\n    setRestSeconds(restDuration * 60);\n  };\n\n  const pomodoroDurationPlus = () => {\n    if (pomodoroDuration < 60) {\n      setPomodoroDuration(pomodoroDuration => pomodoroDuration + 1);\n    }\n  };\n\n  const pomodoroDurationMinus = () => {\n    if (pomodoroDuration > 0) {\n      setPomodoroDuration(pomodoroDuration => pomodoroDuration - 1);\n    }\n  };\n\n  const restDurationPlus = () => {\n    if (restDuration < 60) {\n      setRestDuration(restDuration => restDuration + 1);\n    }\n  };\n\n  const restDurationMinus = () => {\n    if (restDuration > 0) {\n      setRestDuration(restDuration => restDuration - 1);\n    }\n  };\n\n  useEffect(() => {\n    if (isActive && restSeconds === 0 && seconds === 0) {\n      setSeconds(pomodoroDuration * 60);\n      setRestSeconds(restDuration * 60);\n      setPomodoroDone(pomodoroDone => pomodoroDone + 1);\n    }\n\n    const timer = setInterval(() => {\n      if (isActive && seconds > 0) {\n        setSeconds(seconds => seconds - 1);\n      } else if (isActive && restSeconds > 0 && seconds === 0) {\n        setRestSeconds(restSeconds => restSeconds - 1);\n      }\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [isActive, seconds, restSeconds, pomodoroDuration, restDuration]);\n  const style = {\n    display: 'grid',\n    placeItems: 'center'\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      children: [isActive && seconds > 0 ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Work\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 36\n      }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Rest\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 52\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Number of Pomodoros done: \", pomodoroDone]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), seconds === 0 ? /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [Math.trunc(restSeconds / 60), \" : \", restSeconds % 60]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [Math.trunc(seconds / 60), \" : \", seconds % 60]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggle,\n        children: isActive ? 'Pause' : 'Start'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSeconds(seconds - 1),\n        children: \"---testing work\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setRestSeconds(restSeconds - 1),\n        children: \"--- testing rest\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), isActive && seconds === 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setRestSeconds(0),\n        children: \"Skip rest\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Rest: \", restDuration, \",\", ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: restDurationMinus,\n          children: \"Decrease rest period\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: restDurationPlus,\n          children: \"Increase rest period\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Duration of a pomodoro: \", pomodoroDuration, ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: pomodoroDurationMinus,\n          children: \"Decrease pomodoro\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: pomodoroDurationPlus,\n          children: \"Increase pomodoro\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: reset,\n        children: \"Reset timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), \"import \", getPomodoros, \" from '../actions/pomodoroActions'\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => dispatch(getPomodoros),\n      children: \"CLICK ME TO TEST getPomodoros action\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PomodoroDisplayScreen, \"JaqIrOeZ5Q79jG34fxk3KC48J+w=\");\n\n_c = PomodoroDisplayScreen;\nexport default PomodoroDisplayScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"PomodoroDisplayScreen\");","map":{"version":3,"sources":["C:/Users/48500/Desktop/MERN/pomodoro/frontend/src/screens/PomodoroDisplayScreen.js"],"names":["React","useState","useEffect","PomodoroDisplayScreen","pomodoroDuration","setPomodoroDuration","pomodoroDone","setPomodoroDone","restDuration","setRestDuration","seconds","setSeconds","restSeconds","setRestSeconds","isActive","setIsActive","toggle","reset","pomodoroDurationPlus","pomodoroDurationMinus","restDurationPlus","restDurationMinus","timer","setInterval","clearInterval","style","display","placeItems","Math","trunc","getPomodoros","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst PomodoroDisplayScreen = () => {\r\n  const [pomodoroDuration, setPomodoroDuration] = useState(25)\r\n  const [pomodoroDone, setPomodoroDone] = useState(0)\r\n  const [restDuration, setRestDuration] = useState(5)\r\n  const [seconds, setSeconds] = useState(25 * 60)\r\n  const [restSeconds, setRestSeconds] = useState(5 * 60)\r\n  const [isActive, setIsActive] = useState(false)\r\n\r\n  const toggle = () => {\r\n    setIsActive(!isActive)\r\n  }\r\n\r\n  const reset = () => {\r\n    setSeconds(pomodoroDuration * 60)\r\n    setRestSeconds(restDuration * 60)\r\n  }\r\n\r\n  const pomodoroDurationPlus = () => {\r\n    if (pomodoroDuration < 60) {\r\n      setPomodoroDuration((pomodoroDuration) => pomodoroDuration + 1)\r\n    }\r\n  }\r\n\r\n  const pomodoroDurationMinus = () => {\r\n    if (pomodoroDuration > 0) {\r\n      setPomodoroDuration((pomodoroDuration) => pomodoroDuration - 1)\r\n    }\r\n  }\r\n\r\n  const restDurationPlus = () => {\r\n    if (restDuration < 60) {\r\n      setRestDuration((restDuration) => restDuration + 1)\r\n    }\r\n  }\r\n\r\n  const restDurationMinus = () => {\r\n    if (restDuration > 0) {\r\n      setRestDuration((restDuration) => restDuration - 1)\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    if (isActive && restSeconds === 0 && seconds === 0) {\r\n      setSeconds(pomodoroDuration * 60)\r\n      setRestSeconds(restDuration * 60)\r\n      setPomodoroDone((pomodoroDone) => pomodoroDone + 1)\r\n    }\r\n\r\n    const timer = setInterval(() => {\r\n      if (isActive && seconds > 0) {\r\n        setSeconds((seconds) => seconds - 1)\r\n      } else if (isActive && restSeconds > 0 && seconds === 0) {\r\n        setRestSeconds((restSeconds) => restSeconds - 1)\r\n      }\r\n    }, 1000)\r\n\r\n    return () => clearInterval(timer)\r\n  }, [isActive, seconds, restSeconds, pomodoroDuration, restDuration])\r\n\r\n  const style = {\r\n    display: 'grid',\r\n    placeItems: 'center',\r\n  }\r\n  return (\r\n    <>\r\n      <div style={style}>\r\n        {isActive && seconds > 0 ? <h1>Work</h1> : <h1>Rest</h1>}\r\n        <p>Number of Pomodoros done: {pomodoroDone}</p>\r\n\r\n        {seconds === 0 ? (\r\n          <h2>\r\n            {Math.trunc(restSeconds / 60)} : {restSeconds % 60}\r\n          </h2>\r\n        ) : (\r\n          <h2>\r\n            {Math.trunc(seconds / 60)} : {seconds % 60}\r\n          </h2>\r\n        )}\r\n\r\n        <button onClick={toggle}>{isActive ? 'Pause' : 'Start'}</button>\r\n        <button onClick={() => setSeconds(seconds - 1)}>---testing work</button>\r\n        <button onClick={() => setRestSeconds(restSeconds - 1)}>\r\n          --- testing rest\r\n        </button>\r\n\r\n        {isActive && seconds === 0 && (\r\n          <button onClick={() => setRestSeconds(0)}>Skip rest</button>\r\n        )}\r\n\r\n        <p>\r\n          Rest: {restDuration},{' '}\r\n          <button onClick={restDurationMinus}>Decrease rest period</button>\r\n          <button onClick={restDurationPlus}>Increase rest period</button>\r\n        </p>\r\n        <p>\r\n          Duration of a pomodoro: {pomodoroDuration}{' '}\r\n          <button onClick={pomodoroDurationMinus}>Decrease pomodoro</button>\r\n          <button onClick={pomodoroDurationPlus}>Increase pomodoro</button>\r\n        </p>\r\n        <button onClick={reset}>Reset timer</button>\r\n      </div>\r\n      import {getPomodoros} from '../actions/pomodoroActions'\r\n      <button onClick={() => dispatch(getPomodoros)}>\r\n        CLICK ME TO TEST getPomodoros action\r\n      </button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PomodoroDisplayScreen\r\n"]},"metadata":{},"sourceType":"module"}