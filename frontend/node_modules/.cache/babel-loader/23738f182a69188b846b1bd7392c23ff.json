{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\48500\\\\Desktop\\\\MERN\\\\pomodoro\\\\frontend\\\\src\\\\screens\\\\PomodoroDisplayScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\n\nconst PomodoroDisplayScreen = () => {\n  _s();\n\n  const [seconds, setSeconds] = useState(`${25 * 60}`);\n  const [pomodoro, setPomodoro] = useState(`${25 * 60}`);\n  const [rest, setRest] = useState(`${5 * 60}`);\n  const [isActive, setIsActive] = useState(false);\n\n  function toggle() {\n    setIsActive(!isActive);\n  }\n\n  function reset() {\n    setSeconds(`${25 * 60}`);\n    setIsActive(false);\n  }\n\n  useEffect(() => {\n    let timer = null;\n\n    if (isActive && seconds > 0) {\n      timer = setInterval(() => {\n        setSeconds(seconds => seconds - 1);\n      }, 1000);\n    } else if (!isActive && seconds === 0) {\n      clearInterval(timer);\n    }\n\n    return () => clearInterval(timer);\n  }, [isActive, seconds]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Display timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Number of Pomodoros: 1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [Math.trunc(seconds / 60), \" : \", seconds % 60]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggle,\n      children: isActive ? 'Pause' : 'Start'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: reset,\n      children: \"Reset timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PomodoroDisplayScreen, \"n+u3TtlpRKUiSEGZA8kLjvq0rHg=\");\n\n_c = PomodoroDisplayScreen;\nexport default PomodoroDisplayScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"PomodoroDisplayScreen\");","map":{"version":3,"sources":["C:/Users/48500/Desktop/MERN/pomodoro/frontend/src/screens/PomodoroDisplayScreen.js"],"names":["React","useState","useEffect","PomodoroDisplayScreen","seconds","setSeconds","pomodoro","setPomodoro","rest","setRest","isActive","setIsActive","toggle","reset","timer","setInterval","clearInterval","Math","trunc"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,qBAAqB,GAAG,MAAM;AAAA;;AAClC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAE,GAAE,KAAK,EAAG,EAAZ,CAAtC;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAE,GAAE,KAAK,EAAG,EAAZ,CAAxC;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAE,GAAE,IAAI,EAAG,EAAX,CAAhC;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,KAAD,CAAxC;;AAEA,WAASW,MAAT,GAAkB;AAChBD,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACD;;AAED,WAASG,KAAT,GAAiB;AACfR,IAAAA,UAAU,CAAE,GAAE,KAAK,EAAG,EAAZ,CAAV;AACAM,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD;;AAEDT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,KAAK,GAAG,IAAZ;;AACA,QAAIJ,QAAQ,IAAIN,OAAO,GAAG,CAA1B,EAA6B;AAC3BU,MAAAA,KAAK,GAAGC,WAAW,CAAC,MAAM;AACxBV,QAAAA,UAAU,CAAED,OAAD,IAAaA,OAAO,GAAG,CAAxB,CAAV;AACD,OAFkB,EAEhB,IAFgB,CAAnB;AAGD,KAJD,MAIO,IAAI,CAACM,QAAD,IAAaN,OAAO,KAAK,CAA7B,EAAgC;AACrCY,MAAAA,aAAa,CAACF,KAAD,CAAb;AACD;;AACD,WAAO,MAAME,aAAa,CAACF,KAAD,CAA1B;AACD,GAVQ,EAUN,CAACJ,QAAD,EAAWN,OAAX,CAVM,CAAT;AAYA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,iBACGa,IAAI,CAACC,KAAL,CAAWd,OAAO,GAAG,EAArB,CADH,SACgCA,OAAO,GAAG,EAD1C;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAOE;AAAQ,MAAA,OAAO,EAAEQ,MAAjB;AAAA,gBAA0BF,QAAQ,GAAG,OAAH,GAAa;AAA/C;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAQ,MAAA,OAAO,EAAEG,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA,kBADF;AAYD,CAvCD;;GAAMV,qB;;KAAAA,qB;AAyCN,eAAeA,qBAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst PomodoroDisplayScreen = () => {\r\n  const [seconds, setSeconds] = useState(`${25 * 60}`)\r\n  const [pomodoro, setPomodoro] = useState(`${25 * 60}`)\r\n  const [rest, setRest] = useState(`${5 * 60}`)\r\n  const [isActive, setIsActive] = useState(false)\r\n\r\n  function toggle() {\r\n    setIsActive(!isActive)\r\n  }\r\n\r\n  function reset() {\r\n    setSeconds(`${25 * 60}`)\r\n    setIsActive(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    let timer = null\r\n    if (isActive && seconds > 0) {\r\n      timer = setInterval(() => {\r\n        setSeconds((seconds) => seconds - 1)\r\n      }, 1000)\r\n    } else if (!isActive && seconds === 0) {\r\n      clearInterval(timer)\r\n    }\r\n    return () => clearInterval(timer)\r\n  }, [isActive, seconds])\r\n\r\n  return (\r\n    <>\r\n      <h1>Display timer</h1>\r\n      <p>Number of Pomodoros: 1</p>\r\n      <p>\r\n        {Math.trunc(seconds / 60)} : {seconds % 60}\r\n      </p>\r\n\r\n      <button onClick={toggle}>{isActive ? 'Pause' : 'Start'}</button>\r\n      <button onClick={reset}>Reset timer</button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PomodoroDisplayScreen\r\n"]},"metadata":{},"sourceType":"module"}